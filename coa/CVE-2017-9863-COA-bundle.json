{"type": "bundle", "id": "bundle--cda8ff61-d20e-4680-b6fc-619ec4294847", "objects": [{"type": "vulnerability", "spec_version": "2.1", "id": "vulnerability--9c2febdc-73f5-4f6a-b2e9-8fbddb166438", "created": "2023-05-31T16:33:18.54471Z", "modified": "2023-05-31T16:33:18.54471Z", "name": "CVE-2017-9863", "description": "placeholder"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--57f7c604-96d0-4329-8831-41fb0a5d38f7", "created": "2023-05-31T16:33:18.54515Z", "modified": "2023-05-31T16:33:18.54515Z", "name": "coa-1", "description": "Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with. Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context. Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions. In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--13eebe10-e1d3-40f9-b54d-dcd42647f2f5", "created": "2023-05-31T16:33:18.545407Z", "modified": "2023-05-31T16:33:18.545407Z", "relationship_type": "midigates", "source_ref": "course-of-action--57f7c604-96d0-4329-8831-41fb0a5d38f7", "target_ref": "vulnerability--9c2febdc-73f5-4f6a-b2e9-8fbddb166438"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--c69d8fad-133f-47eb-b097-0d6c7a2a4483", "created": "2023-05-31T16:33:18.545698Z", "modified": "2023-05-31T16:33:18.545698Z", "name": "coa-2", "description": "Usage: Users should not open other tabs in the browser when using a social networking site."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--40da50c4-3976-459b-81de-33d720960335", "created": "2023-05-31T16:33:18.545868Z", "modified": "2023-05-31T16:33:18.545868Z", "relationship_type": "midigates", "source_ref": "course-of-action--c69d8fad-133f-47eb-b097-0d6c7a2a4483", "target_ref": "vulnerability--9c2febdc-73f5-4f6a-b2e9-8fbddb166438"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--e9ced27b-937e-46be-8e65-de9fb39f628f", "created": "2023-05-31T16:33:18.546044Z", "modified": "2023-05-31T16:33:18.546044Z", "name": "coa-3", "description": "Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce. On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags). Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session. Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--afccc6a7-d936-4b0d-b8c7-946f170a8fff", "created": "2023-05-31T16:33:18.546194Z", "modified": "2023-05-31T16:33:18.546194Z", "relationship_type": "midigates", "source_ref": "course-of-action--e9ced27b-937e-46be-8e65-de9fb39f628f", "target_ref": "vulnerability--9c2febdc-73f5-4f6a-b2e9-8fbddb166438"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--fa6d5e0c-3453-419b-905f-46230948d4e4", "created": "2023-05-31T16:33:18.546369Z", "modified": "2023-05-31T16:33:18.546369Z", "name": "coa-4", "description": "Design: The browser's security model could be fixed to not leak timing information for cross domain requests"}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--abbe7547-bdfa-47b2-a78d-7ccc5863a26c", "created": "2023-05-31T16:33:18.546521Z", "modified": "2023-05-31T16:33:18.546521Z", "relationship_type": "midigates", "source_ref": "course-of-action--fa6d5e0c-3453-419b-905f-46230948d4e4", "target_ref": "vulnerability--9c2febdc-73f5-4f6a-b2e9-8fbddb166438"}]}