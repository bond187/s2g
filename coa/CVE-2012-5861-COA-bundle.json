{"type": "bundle", "id": "bundle--b3d74f4f-f9d4-4476-a49e-db5cd46d335d", "objects": [{"type": "vulnerability", "spec_version": "2.1", "id": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5", "created": "2023-05-30T21:29:38.830707Z", "modified": "2023-05-30T21:29:38.830707Z", "name": "CVE-2012-5861", "description": "placeholder"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--7842f262-0be7-4966-bd88-6b69dc74007e", "created": "2023-05-30T21:29:38.831103Z", "modified": "2023-05-30T21:29:38.831103Z", "name": "coa-1", "description": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--7b3dc356-82d0-4747-bf21-b2b4f25e50ec", "created": "2023-05-30T21:29:38.831279Z", "modified": "2023-05-30T21:29:38.831279Z", "relationship_type": "midigates", "source_ref": "course-of-action--7842f262-0be7-4966-bd88-6b69dc74007e", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--628e6421-b198-45e9-9c12-0d1218ea1f9c", "created": "2023-05-30T21:29:38.831473Z", "modified": "2023-05-30T21:29:38.831473Z", "name": "coa-2", "description": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--7c35b76e-8030-4012-ba60-1bb2e4e8ef25", "created": "2023-05-30T21:29:38.832134Z", "modified": "2023-05-30T21:29:38.832134Z", "relationship_type": "midigates", "source_ref": "course-of-action--628e6421-b198-45e9-9c12-0d1218ea1f9c", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--352a77b2-0143-4fe0-9ad4-9db1af20f01c", "created": "2023-05-30T21:29:38.83229Z", "modified": "2023-05-30T21:29:38.83229Z", "name": "coa-3", "description": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--89b47c02-ba6e-4ed3-a9bb-5efaec9454ac", "created": "2023-05-30T21:29:38.832443Z", "modified": "2023-05-30T21:29:38.832443Z", "relationship_type": "midigates", "source_ref": "course-of-action--352a77b2-0143-4fe0-9ad4-9db1af20f01c", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--688e00b8-f9c5-49f4-bb2e-591cd466f114", "created": "2023-05-30T21:29:38.832636Z", "modified": "2023-05-30T21:29:38.832636Z", "name": "coa-4", "description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--0bc31c02-ce0b-43cc-9ebf-8d3244dc3037", "created": "2023-05-30T21:29:38.834492Z", "modified": "2023-05-30T21:29:38.834492Z", "relationship_type": "midigates", "source_ref": "course-of-action--688e00b8-f9c5-49f4-bb2e-591cd466f114", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--a57771fa-af1c-43d1-a16c-0cf141325863", "created": "2023-05-30T21:29:38.834629Z", "modified": "2023-05-30T21:29:38.834629Z", "name": "coa-5", "description": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised"}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--481f6130-4e1d-4b3d-acc0-214102d23366", "created": "2023-05-30T21:29:38.834733Z", "modified": "2023-05-30T21:29:38.834733Z", "relationship_type": "midigates", "source_ref": "course-of-action--a57771fa-af1c-43d1-a16c-0cf141325863", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--4604bf95-e517-443b-8337-487797fc43b5", "created": "2023-05-30T21:29:38.834857Z", "modified": "2023-05-30T21:29:38.834857Z", "name": "coa-6", "description": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument)."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--93aae468-ed98-4f91-ae4c-53f5f37309ae", "created": "2023-05-30T21:29:38.83496Z", "modified": "2023-05-30T21:29:38.83496Z", "relationship_type": "midigates", "source_ref": "course-of-action--4604bf95-e517-443b-8337-487797fc43b5", "target_ref": "vulnerability--c52fd4e9-fef2-4ced-bd3f-7667ba3e82e5"}]}