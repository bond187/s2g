{"type": "bundle", "id": "bundle--48af6b81-f3b0-4288-b86a-43f42255aa25", "objects": [{"type": "vulnerability", "spec_version": "2.1", "id": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e", "created": "2023-05-31T16:33:20.408229Z", "modified": "2023-05-31T16:33:20.408229Z", "name": "CVE-2019-7678", "description": "placeholder"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--c63c031b-400e-4b22-a085-f0a56b80805c", "created": "2023-05-31T16:33:20.409054Z", "modified": "2023-05-31T16:33:20.409054Z", "name": "coa-1", "description": "Design: Enforce principle of least privilege. Design: Ensure all input is validated, and does not contain file system commands Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--df2046da-7a4a-4d50-a188-00788123b052", "created": "2023-05-31T16:33:20.409457Z", "modified": "2023-05-31T16:33:20.409457Z", "relationship_type": "midigates", "source_ref": "course-of-action--c63c031b-400e-4b22-a085-f0a56b80805c", "target_ref": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--48cb0b00-167e-4c08-bd0c-5b39b36d8706", "created": "2023-05-31T16:33:20.409975Z", "modified": "2023-05-31T16:33:20.409975Z", "name": "coa-2", "description": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input. Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--d8e7a6fb-8af4-4827-84fb-a4b32aeef48d", "created": "2023-05-31T16:33:20.410344Z", "modified": "2023-05-31T16:33:20.410344Z", "relationship_type": "midigates", "source_ref": "course-of-action--48cb0b00-167e-4c08-bd0c-5b39b36d8706", "target_ref": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--3dc48eb9-b40f-4a5b-a028-16244485d068", "created": "2023-05-31T16:33:20.41076Z", "modified": "2023-05-31T16:33:20.41076Z", "name": "coa-3", "description": "Verify that the user-supplied data does not use backslash character to escape malicious characters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Be aware of the threat of alternative method of data encoding. Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data. In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--f44bba86-4036-454f-95cf-6a542516ced7", "created": "2023-05-31T16:33:20.411095Z", "modified": "2023-05-31T16:33:20.411095Z", "relationship_type": "midigates", "source_ref": "course-of-action--3dc48eb9-b40f-4a5b-a028-16244485d068", "target_ref": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--16b536e0-300a-4882-92eb-a1f4c160bca4", "created": "2023-05-31T16:33:20.411649Z", "modified": "2023-05-31T16:33:20.411649Z", "name": "coa-4", "description": "Design: Configure the access control correctly. Design: Enforce principle of least privilege. Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement. Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. Implementation: Perform input validation for all remote content, including remote and user-generated content. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. Implementation: Use indirect references rather than actual file names. Implementation: Use possible permissions on file access when developing and deploying web applications. Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--d640c1a6-2aee-40d3-a8d6-5637ade19d20", "created": "2023-05-31T16:33:20.411988Z", "modified": "2023-05-31T16:33:20.411988Z", "relationship_type": "midigates", "source_ref": "course-of-action--16b536e0-300a-4882-92eb-a1f4c160bca4", "target_ref": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e"}, {"type": "course-of-action", "spec_version": "2.1", "id": "course-of-action--5f00beaa-f56d-4e15-b5fb-a1d1f0d5bb79", "created": "2023-05-31T16:33:20.412318Z", "modified": "2023-05-31T16:33:20.412318Z", "name": "coa-5", "description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx) Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) Test your path decoding process against malicious input. In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system."}, {"type": "relationship", "spec_version": "2.1", "id": "relationship--74e8d23f-4ca7-4e61-9868-33a66978fe42", "created": "2023-05-31T16:33:20.41255Z", "modified": "2023-05-31T16:33:20.41255Z", "relationship_type": "midigates", "source_ref": "course-of-action--5f00beaa-f56d-4e15-b5fb-a1d1f0d5bb79", "target_ref": "vulnerability--a5559c52-bb29-4654-9c3c-e10910cb650e"}]}